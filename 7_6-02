package practice;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class Main {
	public static void main(String[] args) throws Exception {
		Class<?> clazz = RefSample.class;
		// 引数1つのコンストラクタを取得し、インスタンスを生成する
		Constructor<?> cons = clazz.getConstructor(int.class);
		RefSample rs = (RefSample) cons.newInstance(256);
		// timesフィールドに関するFieldを取得して読み書き
		Field f = clazz.getDeclaredField("count");
		f.set(rs, rs.count);                  // rsのtimesに代入
		System.out.println(f.get(rs)); // rsのtimesを取得
		// 引数2つのhelloメソッドを取得して呼び出す
		Method m = clazz.getMethod("test", String.class);
		m.invoke(rs, "reflection!");
		// クラスやメソッドへの修飾（publicやfinalの有無）を調べる
		boolean pubc = Modifier.isPublic(clazz.getModifiers());
		boolean finm = Modifier.isFinal(m.getModifiers());

		Class<?> claz = SHero.class;
		Constructor<?> con = claz.getConstructor();
		SHero sh = (SHero) con.newInstance();
		Field ff = claz.getField("name");
		ff.set(sh, sh.name);
		System.out.println(ff.get(sh)); // shのtimesを取得
		Method mm = claz.getMethod("attack");
		mm.invoke(sh);

//		getMethodやgetFieldのgetDeclared	or	get	はそのクラスか親のクラスかの違い
//		クラスのメソッドやフィールドはpublicにしないと上手く作動しない

	}
}
