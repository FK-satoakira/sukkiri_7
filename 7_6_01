package practice;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class Main {
	public static void main(String[] args) throws Exception {
		Class<?> cla = Hero.class;
		Constructor comst = cla.getConstructor(String.class,int.class);
		System.out.println(comst);
		Hero h = (Hero) comst.newInstance("testhero",222);	//クラスのコンストラクタと引数を揃える
		System.out.println(h); /*taro 10 0 の最後のゼロは何？*/
		Field fi = cla.getField(h.name);	//このコードが正しくない
//		System.out.println(fi.getName());
		fi.set(h,"katsuo");
		System.out.println(fi);
//		java.lang.NoSuchFieldException:指定された名前のフィールドがクラスにはないことを通知します。




		Class<?> clazz = RefSample.class;
		Constructor<?> cons = clazz.getConstructor();	//()内は引数を揃える。	(注)int.class,	String.classと書く。

		RefSample rs = (RefSample) cons.newInstance(); /*java.lang.IllegalArgumentExceptionは不適切引数をメソッドに渡したとき出る*/
		Field f = clazz.getField("times");

		f.set(rs,rs.times);                  // 「rs.times」この記述なら256をそのまま受けとれる
//		(クラスインスタンス,引数)

		System.out.println(f.get(rs));
		Method m = clazz.getMethod("hello", String.class);
		m.invoke(rs, "reflection!");


		// クラスやメソッドへの修飾（publicやfinalの有無）を調べる
		boolean pubc = Modifier.isPublic(clazz.getModifiers());
		boolean finm = Modifier.isFinal(m.getModifiers());
		System.out.println(finm);
	}
}


